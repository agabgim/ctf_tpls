INCLUDE( ADD_TPL.cmake )


FUNCTION(PRINT_VAR VARIBLE_NAME)
  MESSAGE("-- " "${VARIBLE_NAME}='${${VARIBLE_NAME}}'")
ENDFUNCTION()


# Macro to identify the compiler
MACRO( IDENTIFY_COMPILER )
    # SET the C/C++ compiler
    IF( CMAKE_COMPILE_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX )
        SET( USING_GCC TRUE )
        MESSAGE("Using gcc")
    ELSEIF( MSVC OR MSVC_IDE OR MSVC60 OR MSVC70 OR MSVC71 OR MSVC80 OR CMAKE_COMPILER_2005 OR MSVC90 OR MSVC10 )
        IF( NOT ${CMAKE_SYSTEM_NAME} STREQUAL "Windows" )
            MESSAGE( FATAL_ERROR "Using microsoft compilers on non-windows system?" )
        ENDIF()
        SET( USING_MICROSOFT TRUE )
        MESSAGE("Using Microsoft")
    ELSEIF( (${CMAKE_C_COMPILER_ID} MATCHES "Intel") OR (${CMAKE_CXX_COMPILER_ID} MATCHES "Intel") ) 
        SET(USING_ICC TRUE)
        MESSAGE("Using icc")
    ELSEIF( ${CMAKE_C_COMPILER_ID} MATCHES "PGI")
        SET(USING_PGCC TRUE)
        MESSAGE("Using pgCC")
    ELSEIF( (${CMAKE_C_COMPILER_ID} MATCHES "CRAY") OR (${CMAKE_C_COMPILER_ID} MATCHES "Cray") )
        SET(USING_CRAY TRUE)
        MESSAGE("Using Cray")
    ELSE()
        SET(USING_DEFAULT TRUE)
        MESSAGE("${CMAKE_C_COMPILER_ID}")
        MESSAGE("Unknown C/C++ compiler, default flags will be used")
    ENDIF()
    # SET the Fortran++ compiler
    IF( CMAKE_COMPILE_IS_GFORTRAN OR (${CMAKE_Fortran_COMPILER_ID} MATCHES "GNU") )
        SET( USING_GFORTRAN TRUE )
        MESSAGE("Using gfortran")
    ELSEIF( (${CMAKE_Fortran_COMPILER_ID} MATCHES "Intel") ) 
        SET(USING_IFORT TRUE)
        MESSAGE("Using ifort")
    ELSEIF( ${CMAKE_Fortran_COMPILER_ID} MATCHES "PGI")
        SET(USING_PGF90 TRUE)
        MESSAGE("Using pgf90")
    ELSE()
        SET(USING_DEFAULT TRUE)
        MESSAGE("${CMAKE_Fortran_COMPILER_ID}")
        MESSAGE("Unknown Fortran compiler, default flags will be used")
    ENDIF()
ENDMACRO()


# Macro to set the compile/link flags
MACRO( SET_COMPILE_FLAGS )
    # Set the default flags for each build type
    IF ( USING_MICROSOFT )
        SET(CMAKE_C_FLAGS_DEBUG       "-D_DEBUG /DEBUG /Od /EHsc /MDd /Zi" )
        SET(CMAKE_C_FLAGS_RELEASE     "/O3 /EHsc /MD"                      )
        SET(CMAKE_CXX_FLAGS_DEBUG     "-D_DEBUG /DEBUG /Od /EHsc /MDd /Zi" )
        SET(CMAKE_CXX_FLAGS_RELEASE   "/O3 /EHsc /MD"                      )
        SET(CMAKE_Fortran_FLAGS_DEBUG ""                                   )
        SET(CMAKE_Fortran_FLAGS_RELEASE ""                                 )
    ELSE()
        SET(CMAKE_C_FLAGS_DEBUG       "-g -D_DEBUG -O0" )
        SET(CMAKE_C_FLAGS_RELEASE     "-O3 -fPIC"       )
        SET(CMAKE_CXX_FLAGS_DEBUG     "-g -D_DEBUG -O0" )
        SET(CMAKE_CXX_FLAGS_RELEASE   "-O3 -fPIC"       )
        SET(CMAKE_Fortran_FLAGS_DEBUG "-g -O0"          )
        SET(CMAKE_Fortran_FLAGS_RELEASE "-O3 -fPIC"     )
    ENDIF()
    # Set the compiler flags to use
    IF ( ${CMAKE_BUILD_TYPE} STREQUAL "Debug" OR ${CMAKE_BUILD_TYPE} STREQUAL "DEBUG")
        SET(CMAKE_C_FLAGS       ${CMAKE_C_FLAGS_DEBUG}       )
        SET(CMAKE_CXX_FLAGS     ${CMAKE_CXX_FLAGS_DEBUG}     )
        SET(CMAKE_Fortran_FLAGS ${CMAKE_Fortran_FLAGS_DEBUG} )
    ELSEIF ( ${CMAKE_BUILD_TYPE} STREQUAL "Release" OR ${CMAKE_BUILD_TYPE} STREQUAL "RELEASE")
        SET(CMAKE_C_FLAGS       ${CMAKE_C_FLAGS_RELEASE}       )
        SET(CMAKE_CXX_FLAGS     ${CMAKE_CXX_FLAGS_RELEASE}     )
        SET(CMAKE_Fortran_FLAGS ${CMAKE_Fortran_FLAGS_RELEASE} )
    ELSE()
        MESSAGE(FATAL_ERROR "Unknown value for CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}")
    ENDIF()

    # Add user flags
    SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${CFLAGS}" )
    SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CXXFLAGS}" )
    SET( CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} ${FFLAGS}" )
    SET( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${LDFLAGS}" )
    SET( CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} ${LDFLAGS}" )
    IF ( (NOT ENABLE_SHARED) AND (NOT ENABLE_STATIC) ) 
        MESSAGE(FATAL_ERROR "Neither static or shared libraries enabled.  Please set ENABLE_SHARED or ENABLE_STATIC")
    ELSEIF ( ENABLE_SHARED AND ENABLE_STATIC )
        MESSAGE(FATAL_ERROR "Building both static and shared libraries simultaneously is not currently supported")
    ELSEIF ( ENABLE_SHARED ) 
        SET( BUILD_SHARED_LIBS TRUE )
        SET( CMAKE_ARGS "-DBUILD_SHARED_LIBS:BOOL=TRUE" )
        SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" )
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
        SET( CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS}" )
        SET( ENV_LDFLAGS "${CMAKE_SHARED_LINKER_FLAGS}" )
    ELSE()
        SET( BUILD_SHARED_LIBS FALSE )
        SET( CMAKE_ARGS "-DBUILD_SHARED_LIBS:BOOL=FALSE" )
        SET( CMAKE_C_FLAGS "${CMAKE_C_FLAGS}" )
        SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}" )
        SET( ENV_LDFLAGS "${CMAKE_STATIC_LINKER_FLAGS} -ldl" )
    ENDIF()
    SET( ENV_VARS CC=${CMAKE_C_COMPILER} CFLAGS=${CMAKE_C_FLAGS} )
    SET( ENV_VARS ${ENV_VARS} CXX=${CMAKE_CXX_COMPILER} CXXFLAGS=${CMAKE_CXX_FLAGS} )
    SET( ENV_VARS ${ENV_VARS} F77=mpif77 FFLAGS=${CMAKE_Fortran_FLAGS} )
    SET( ENV_VARS ${ENV_VARS} FC=${CMAKE_Fortran_COMPILER} FCFLAGS=${CMAKE_Fortran_FLAGS} )
    SET( ENV_VARS ${ENV_VARS} LDFLAGS=${ENV_LDFLAGS} )
    SET( ENV_SERIAL_VARS CC=${CC_SERIAL} CFLAGS=${CMAKE_C_FLAGS} )
    SET( ENV_SERIAL_VARS ${ENV_SERIAL_VARS} CXX=${CXX_SERIAL} CXXFLAGS=${CMAKE_CXX_FLAGS} )
    SET( ENV_SERIAL_VARS ${ENV_SERIAL_VARS} F77=${FC_SERIAL} FFLAGS=${CMAKE_Fortran_FLAGS} )
    SET( ENV_SERIAL_VARS ${ENV_SERIAL_VARS} FC=${FC_SERIAL} FCFLAGS=${CMAKE_Fortran_FLAGS} )
    SET( ENV_SERIAL_VARS ${ENV_SERIAL_VARS} LDFLAGS=${ENV_LDFLAGS} )



    SET( CMAKE_ARGS "${CMAKE_ARGS};-DCMAKE_C_COMPILER=${CMAKE_C_COMPILER};-DCMAKE_C_FLAGS=${CMAKE_C_FLAGS}" )
    SET( CMAKE_ARGS "${CMAKE_ARGS};-DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER};-DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS};" )
    SET( CMAKE_ARGS "${CMAKE_ARGS};-DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER};-DCMAKE_Fortran_FLAGS=${CMAKE_Fortran_FLAGS};" )
    SET( CMAKE_ARGS "${CMAKE_ARGS};-DCMAKE_SHARED_LINKER_FLAGS=${CMAKE_SHARED_LINKER_FLAGS}" )
    # Write variables to cmake file
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "\n# Set the compilers and compile flags\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE})\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(ENABLE_STATIC ${ENABLE_STATIC})\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(ENABLE_SHARED ${ENABLE_SHARED})\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(BUILD_STATIC_LIBS ${ENABLE_STATIC})\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(BUILD_SHARED_LIBS ${ENABLE_SHARED})\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_C_COMPILER \"${CMAKE_C_COMPILER}\")\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_CXX_COMPILER \"${CMAKE_CXX_COMPILER}\")\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_Fortran_COMPILER \"${CMAKE_Fortran_COMPILER}\")\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS}\")\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_Fortran_FLAGS \"${CMAKE_Fortran_FLAGS}\")\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_STATIC_LINKER_FLAGS \"${CMAKE_STATIC_LINKER_FLAGS}\")\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS}\")\n" )
    FILE( APPEND "${CMAKE_INSTALL_PREFIX}/TPLs.cmake" "SET(LDFLAGS \"${LDFLAGS}\")\n" )
ENDMACRO()


# Macro to set the compile/link flags
MACRO( SET_DEFAULT_TPL TPL VAR VAL )
    IF ( (NOT ${TPL}_URL) AND (NOT ${TPL}_SRC_DIR) AND (NOT ${TPL}_INSTALL_DIR) )
        SET( ${TPL}_${VAR} "${VAL}" )
    ENDIF()
ENDMACRO()


# Macro to verify that a path has been set
MACRO( VERIFY_PATH PATH_NAME )
    IF ("${PATH_NAME}" STREQUAL "")
        MESSAGE ( FATAL_ERROR "Path is not set: ${PATH_NAME}" )
    ENDIF()
    IF ( NOT EXISTS ${PATH_NAME} )
        MESSAGE ( FATAL_ERROR "Path does not exist: ${PATH_NAME}" )
    ENDIF()
ENDMACRO()


FUNCTION(TRIBITS_SORT_LIST_ACCORDING_TO_MASTER_LIST  MASTER_LIST  LIST_VAR_INOUT)

  #MESSAGE("TRIBITS_SORT_LIST_ACCORDING_TO_MASTER_LIST:")
  #PRINT_VAR(MASTER_LIST)
  #PRINT_VAR(LIST_VAR_INOUT)
  #PRINT_VAR(${LIST_VAR_INOUT})

  SET(SORTED_LIST)

  FOREACH(ITEM ${MASTER_LIST})
    LIST(FIND ${LIST_VAR_INOUT} ${ITEM} ITEM_IDX)
     IF (NOT ITEM_IDX EQUAL -1)
      LIST(APPEND SORTED_LIST ${ITEM})
    ENDIF()
  ENDFOREACH()

  #PRINT_VAR(SORTED_LIST)

  SET(${LIST_VAR_INOUT} ${SORTED_LIST} PARENT_SCOPE)

ENDFUNCTION()

